Index: packages/cli/internal/pkg/cli/context/manager.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/cli/internal/pkg/cli/context/manager.go b/packages/cli/internal/pkg/cli/context/manager.go
--- a/packages/cli/internal/pkg/cli/context/manager.go	(revision 7fb7af2237522fa71ad1b34eb59ebb7a1e046144)
+++ b/packages/cli/internal/pkg/cli/context/manager.go	(revision 46eba3064b0b9c2e39206695bbc36798a0bdcb90)
@@ -1,7 +1,6 @@
 package context
 
 import (
-	"fmt"
 	"net/url"
 	"strings"
 
@@ -98,9 +97,9 @@
 	if m.err != nil {
 		return
 	}
-	contextSpec, ok := m.projectSpec.Contexts[contextName]
-	if !ok {
-		m.err = fmt.Errorf("context '%s' is not defined in Project '%s' specification", contextName, m.projectSpec.Name)
+	contextSpec, err := spec.GetContext(m.projectSpec, contextName)
+	if err != nil {
+		m.err = err
 		return
 	}
 	m.contextSpec = contextSpec
@@ -174,8 +173,9 @@
 		return
 	}
 
-	if _, contextFound := m.projectSpec.Contexts[contextName]; !contextFound {
-		m.err = fmt.Errorf("context '%s' does not exist", contextName)
+	context, err := spec.GetContext(m.projectSpec, contextName)
+	if err != nil {
+		m.err = err
 		return
 	}
 
@@ -192,8 +192,8 @@
 		RequestSpotInstances: m.contextSpec.RequestSpotInstances,
 		// TODO: we default to a single engine in a context for now
 		// need to allow for multiple engines in the same context
-		EngineName:        m.projectSpec.Contexts[contextName].Engines[0].Engine,
-		EngineDesignation: m.projectSpec.Contexts[contextName].Engines[0].Engine,
+		EngineName:        context.Engines[0].Engine,
+		EngineDesignation: context.Engines[0].Engine,
 	}
 }
 
Index: packages/cli/internal/pkg/cli/context/manager_info.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/cli/internal/pkg/cli/context/manager_info.go b/packages/cli/internal/pkg/cli/context/manager_info.go
--- a/packages/cli/internal/pkg/cli/context/manager_info.go	(revision 7fb7af2237522fa71ad1b34eb59ebb7a1e046144)
+++ b/packages/cli/internal/pkg/cli/context/manager_info.go	(revision 46eba3064b0b9c2e39206695bbc36798a0bdcb90)
@@ -4,6 +4,7 @@
 	"errors"
 
 	"github.com/aws/amazon-genomics-cli/cli/internal/pkg/cli/awsresources"
+	"github.com/aws/amazon-genomics-cli/cli/internal/pkg/cli/spec"
 	"github.com/aws/amazon-genomics-cli/common/aws/cfn"
 	"github.com/aws/amazon-genomics-cli/common/aws/s3"
 )
@@ -52,11 +53,17 @@
 	if m.err != nil {
 		return Detail{}, m.err
 	}
+
+	context, err := spec.GetContext(m.projectSpec, contextName)
+	if err != nil {
+		return Detail{}, err
+	}
+
 	contextInfo := Detail{
 		Summary: Summary{
 			Name:          contextName,
-			IsSpot:        m.projectSpec.Contexts[contextName].RequestSpotInstances,
-			InstanceTypes: m.projectSpec.Contexts[contextName].InstanceTypes,
+			IsSpot:        context.RequestSpotInstances,
+			InstanceTypes: context.InstanceTypes,
 		},
 		Status:             m.contextStatus,
 		BucketLocation:     s3.RenderS3Uri(m.outputBucket, awsresources.RenderBucketContextKey(m.projectSpec.Name, m.userId, contextName)),
Index: packages/cli/internal/pkg/cli/context/manager_info_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/cli/internal/pkg/cli/context/manager_info_test.go b/packages/cli/internal/pkg/cli/context/manager_info_test.go
--- a/packages/cli/internal/pkg/cli/context/manager_info_test.go	(revision 7fb7af2237522fa71ad1b34eb59ebb7a1e046144)
+++ b/packages/cli/internal/pkg/cli/context/manager_info_test.go	(revision 46eba3064b0b9c2e39206695bbc36798a0bdcb90)
@@ -95,7 +95,7 @@
 			},
 		},
 		"unknown context": {
-			expectedErr: fmt.Errorf("context 'testContextName1' does not exist"),
+			expectedErr: fmt.Errorf("context 'testContextName1' is not defined in Project 'testProjectName' specification"),
 			setupMocks: func(t *testing.T) mockClients {
 				mockClients := createMocks(t)
 				mockClients.configMock.EXPECT().GetUserEmailAddress().Return(testUserEmail, nil)
@@ -140,7 +140,7 @@
 			},
 		},
 		"context not exist error": {
-			expectedErr: fmt.Errorf("context 'testContextName1' does not exist"),
+			expectedErr: fmt.Errorf("context 'testContextName1' is not defined in Project 'testProjectName' specification"),
 			setupMocks: func(t *testing.T) mockClients {
 				mockClients := createMocks(t)
 				mockClients.configMock.EXPECT().GetUserEmailAddress().Return(testUserEmail, nil)
Index: packages/cli/internal/pkg/cli/spec/context.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/cli/internal/pkg/cli/spec/context.go b/packages/cli/internal/pkg/cli/spec/context.go
--- a/packages/cli/internal/pkg/cli/spec/context.go	(revision 7fb7af2237522fa71ad1b34eb59ebb7a1e046144)
+++ b/packages/cli/internal/pkg/cli/spec/context.go	(revision 46eba3064b0b9c2e39206695bbc36798a0bdcb90)
@@ -1,12 +1,22 @@
 package spec
 
+import "fmt"
+
 type Engine struct {
 	Type   string `yaml:"type"`
 	Engine string `yaml:"engine"`
 }
-
 type Context struct {
 	InstanceTypes        []string `yaml:"instanceTypes,omitempty"`
 	RequestSpotInstances bool     `yaml:"requestSpotInstances,omitempty"`
 	Engines              []Engine `yaml:"engines"`
 }
+
+func GetContext(projectSpec Project, contextName string) (Context, error) {
+	contextSpec, ok := projectSpec.Contexts[contextName]
+	if !ok {
+		return Context{}, fmt.Errorf("context '%s' is not defined in Project '%s' specification", contextName, projectSpec.Name)
+	}
+
+	return contextSpec, nil
+}
Index: packages/cli/internal/pkg/cli/spec/context_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/cli/internal/pkg/cli/spec/context_test.go b/packages/cli/internal/pkg/cli/spec/context_test.go
new file mode 100644
--- /dev/null	(revision 46eba3064b0b9c2e39206695bbc36798a0bdcb90)
+++ b/packages/cli/internal/pkg/cli/spec/context_test.go	(revision 46eba3064b0b9c2e39206695bbc36798a0bdcb90)
@@ -0,0 +1,81 @@
+package spec
+
+import (
+	"errors"
+	"testing"
+
+	"github.com/stretchr/testify/assert"
+)
+
+func TestGetContext(t *testing.T) {
+	type args struct {
+		projectSpec Project
+		contextName string
+	}
+	tests := []struct {
+		name            string
+		args            args
+		expectedContext Context
+		expectedError   error
+	}{
+		{
+			name: "Unknown context name",
+			args: args{
+				projectSpec: Project{
+					Name: "myProject",
+					Contexts: map[string]Context{
+						"ctx1": {
+							Engines: []Engine{
+								{Type: "wdl", Engine: "miniwdl"},
+							},
+						},
+						"ctx2": {
+							Engines: []Engine{
+								{Type: "nextflow", Engine: "nextflow"},
+							},
+						},
+					},
+				},
+				contextName: "badContextName",
+			},
+			expectedError: errors.New("context 'badContextName' is not defined in Project 'myProject' specification"),
+		},
+		{
+			name: "Existing context name ",
+			args: args{
+				projectSpec: Project{
+					Name: "Complex",
+					Contexts: map[string]Context{
+						"ctx1": {
+							Engines: []Engine{
+								{Type: "wdl", Engine: "miniwdl"},
+							},
+						},
+						"ctx2": {
+							Engines: []Engine{
+								{Type: "nextflow", Engine: "nextflow"},
+							},
+						},
+					},
+				},
+				contextName: "ctx1",
+			},
+			expectedError: nil,
+			expectedContext: Context{
+				Engines: []Engine{
+					{Type: "wdl", Engine: "miniwdl"},
+				},
+			},
+		},
+	}
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			context, err := GetContext(tt.args.projectSpec, tt.args.contextName)
+			if tt.expectedError != nil {
+				assert.Error(t, err, tt.expectedError.Error())
+			} else {
+				assert.Equal(t, tt.expectedContext, context)
+			}
+		})
+	}
+}
Index: packages/cli/internal/pkg/cli/workflow/manager.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/cli/internal/pkg/cli/workflow/manager.go b/packages/cli/internal/pkg/cli/workflow/manager.go
--- a/packages/cli/internal/pkg/cli/workflow/manager.go	(revision 7fb7af2237522fa71ad1b34eb59ebb7a1e046144)
+++ b/packages/cli/internal/pkg/cli/workflow/manager.go	(revision 46eba3064b0b9c2e39206695bbc36798a0bdcb90)
@@ -335,9 +335,9 @@
 		return
 	}
 
-	contextSpec, ok := m.projectSpec.Contexts[contextName]
-	if !ok {
-		m.err = fmt.Errorf("context '%s' is not defined in project specificaiton", contextName)
+	contextSpec, err := spec.GetContext(m.projectSpec, contextName)
+	if err != nil {
+		m.err = err
 		return
 	}
 	m.contextSpec = contextSpec
