Index: packages/cli/internal/pkg/cli/account_activate.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/cli/internal/pkg/cli/account_activate.go b/packages/cli/internal/pkg/cli/account_activate.go
--- a/packages/cli/internal/pkg/cli/account_activate.go	(revision 74400fa74248090c87ba743c68e42a8a57c22b97)
+++ b/packages/cli/internal/pkg/cli/account_activate.go	(revision 7fb7af2237522fa71ad1b34eb59ebb7a1e046144)
@@ -9,6 +9,7 @@
 
 	"github.com/aws/amazon-genomics-cli/cli/environment"
 	"github.com/aws/amazon-genomics-cli/cli/internal/pkg/cli/clierror"
+	"github.com/aws/amazon-genomics-cli/cli/internal/pkg/cli/config"
 	"github.com/aws/amazon-genomics-cli/common/aws"
 	"github.com/aws/amazon-genomics-cli/common/aws/cdk"
 	"github.com/aws/amazon-genomics-cli/common/aws/ecr"
@@ -114,7 +115,7 @@
 }
 
 func (o accountActivateOpts) deployCoreInfrastructure(environmentVars []string) error {
-	homeDir, err := DetermineHomeDir()
+	homeDir, err := config.DetermineHomeDir()
 	if err != nil {
 		return err
 	}
Index: packages/cli/internal/pkg/cli/cli.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/cli/internal/pkg/cli/cli.go b/packages/cli/internal/pkg/cli/cli.go
--- a/packages/cli/internal/pkg/cli/cli.go	(revision 74400fa74248090c87ba743c68e42a8a57c22b97)
+++ b/packages/cli/internal/pkg/cli/cli.go	(revision 7fb7af2237522fa71ad1b34eb59ebb7a1e046144)
@@ -21,15 +21,6 @@
 	return bucketName
 }
 
-// DetermineHomeDir returns the file system directory where the AGC files live.
-func DetermineHomeDir() (string, error) {
-	dir, err := os.UserHomeDir()
-	if err != nil {
-		return "", err
-	}
-	return dir, nil
-}
-
 // runCmdE wraps one of the run error methods, PreRunE, RunE, of a cobra command so that if a user
 // types "help" in the arguments the usage string is printed instead of running the command.
 func runCmdE(f func(cmd *cobra.Command, args []string) error) func(cmd *cobra.Command, args []string) error {
Index: packages/cli/internal/pkg/cli/config/config_client.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/cli/internal/pkg/cli/config/config_client.go b/packages/cli/internal/pkg/cli/config/config_client.go
--- a/packages/cli/internal/pkg/cli/config/config_client.go	(revision 74400fa74248090c87ba743c68e42a8a57c22b97)
+++ b/packages/cli/internal/pkg/cli/config/config_client.go	(revision 7fb7af2237522fa71ad1b34eb59ebb7a1e046144)
@@ -19,8 +19,10 @@
 	configFilePath string
 }
 
+var osUserHomeDir = os.UserHomeDir
+
 func NewConfigClient() (*Client, error) {
-	homeDir, err := os.UserHomeDir()
+	homeDir, err := DetermineHomeDir()
 	if err != nil {
 		return nil, err
 	}
@@ -36,6 +38,15 @@
 	return &Client{configFilePath: configFilePath}, nil
 }
 
+// DetermineHomeDir returns the file system directory where the AGC files live.
+func DetermineHomeDir() (string, error) {
+	dir, err := osUserHomeDir()
+	if err != nil {
+		return "", err
+	}
+	return dir, nil
+}
+
 func ensureDirExistence(dirPath string) error {
 	dirStat, err := os.Stat(dirPath)
 	if os.IsNotExist(err) {
Index: packages/cli/internal/pkg/cli/config/config_client_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/cli/internal/pkg/cli/config/config_client_test.go b/packages/cli/internal/pkg/cli/config/config_client_test.go
--- a/packages/cli/internal/pkg/cli/config/config_client_test.go	(revision 74400fa74248090c87ba743c68e42a8a57c22b97)
+++ b/packages/cli/internal/pkg/cli/config/config_client_test.go	(revision 7fb7af2237522fa71ad1b34eb59ebb7a1e046144)
@@ -1,8 +1,11 @@
 package config
 
 import (
+	"errors"
 	"testing"
 
+	iomocks "github.com/aws/amazon-genomics-cli/cli/internal/pkg/mocks/io"
+	"github.com/golang/mock/gomock"
 	"github.com/stretchr/testify/assert"
 )
 
@@ -49,3 +52,26 @@
 		})
 	}
 }
+
+func TestDetermineHomeDir_Success(t *testing.T) {
+	ctrl := gomock.NewController(t)
+	mockOs := iomocks.NewMockOS(ctrl)
+	osUserHomeDir = mockOs.UserHomeDir
+	expectedPath := "/some/dir"
+	mockOs.EXPECT().UserHomeDir().Return(expectedPath, nil)
+	actualPath, err := DetermineHomeDir()
+
+	assert.NoError(t, err)
+	assert.Equal(t, expectedPath, actualPath)
+}
+
+func TestDetermineHomeDir_Failure(t *testing.T) {
+	ctrl := gomock.NewController(t)
+	mockOs := iomocks.NewMockOS(ctrl)
+	osUserHomeDir = mockOs.UserHomeDir
+	expectedError := errors.New("some error")
+	mockOs.EXPECT().UserHomeDir().Return("", expectedError)
+	_, err := DetermineHomeDir()
+
+	assert.Error(t, err, expectedError.Error())
+}
Index: packages/cli/internal/pkg/cli/context/manager.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/cli/internal/pkg/cli/context/manager.go b/packages/cli/internal/pkg/cli/context/manager.go
--- a/packages/cli/internal/pkg/cli/context/manager.go	(revision 74400fa74248090c87ba743c68e42a8a57c22b97)
+++ b/packages/cli/internal/pkg/cli/context/manager.go	(revision 7fb7af2237522fa71ad1b34eb59ebb7a1e046144)
@@ -3,7 +3,6 @@
 import (
 	"fmt"
 	"net/url"
-	"os"
 	"strings"
 
 	"github.com/aws/amazon-genomics-cli/cli/internal/pkg/cli/config"
@@ -70,7 +69,7 @@
 	if err != nil {
 		log.Fatal().Err(err).Msg("unable to create Project client for context manager")
 	}
-	homeDir, err := os.UserHomeDir()
+	homeDir, err := config.DetermineHomeDir()
 	if err != nil {
 		log.Fatal().Err(err).Msg("unable to determine home directory")
 	}
Index: packages/cli/internal/pkg/mocks/io/interfaces.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/cli/internal/pkg/mocks/io/interfaces.go b/packages/cli/internal/pkg/mocks/io/interfaces.go
--- a/packages/cli/internal/pkg/mocks/io/interfaces.go	(revision 74400fa74248090c87ba743c68e42a8a57c22b97)
+++ b/packages/cli/internal/pkg/mocks/io/interfaces.go	(revision 7fb7af2237522fa71ad1b34eb59ebb7a1e046144)
@@ -5,6 +5,7 @@
 type OS interface {
 	Remove(name string) error
 	Chdir(dir string) error
+	UserHomeDir() (string, error)
 }
 
 type Zip interface {
Index: packages/cli/internal/pkg/mocks/io/mock_interfaces.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/cli/internal/pkg/mocks/io/mock_interfaces.go b/packages/cli/internal/pkg/mocks/io/mock_interfaces.go
--- a/packages/cli/internal/pkg/mocks/io/mock_interfaces.go	(revision 74400fa74248090c87ba743c68e42a8a57c22b97)
+++ b/packages/cli/internal/pkg/mocks/io/mock_interfaces.go	(revision 7fb7af2237522fa71ad1b34eb59ebb7a1e046144)
@@ -48,21 +48,6 @@
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chdir", reflect.TypeOf((*MockOS)(nil).Chdir), dir)
 }
 
-// MkdirTemp mocks base method.
-func (m *MockOS) MkdirTemp(dir, pattern string) (string, error) {
-	m.ctrl.T.Helper()
-	ret := m.ctrl.Call(m, "MkdirTemp", dir, pattern)
-	ret0, _ := ret[0].(string)
-	ret1, _ := ret[1].(error)
-	return ret0, ret1
-}
-
-// MkdirTemp indicates an expected call of MkdirTemp.
-func (mr *MockOSMockRecorder) MkdirTemp(dir, pattern interface{}) *gomock.Call {
-	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirTemp", reflect.TypeOf((*MockOS)(nil).MkdirTemp), dir, pattern)
-}
-
 // Remove mocks base method.
 func (m *MockOS) Remove(name string) error {
 	m.ctrl.T.Helper()
@@ -77,6 +62,21 @@
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockOS)(nil).Remove), name)
 }
 
+// UserHomeDir mocks base method.
+func (m *MockOS) UserHomeDir() (string, error) {
+	m.ctrl.T.Helper()
+	ret := m.ctrl.Call(m, "UserHomeDir")
+	ret0, _ := ret[0].(string)
+	ret1, _ := ret[1].(error)
+	return ret0, ret1
+}
+
+// UserHomeDir indicates an expected call of UserHomeDir.
+func (mr *MockOSMockRecorder) UserHomeDir() *gomock.Call {
+	mr.mock.ctrl.T.Helper()
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHomeDir", reflect.TypeOf((*MockOS)(nil).UserHomeDir))
+}
+
 // MockZip is a mock of Zip interface.
 type MockZip struct {
 	ctrl     *gomock.Controller
